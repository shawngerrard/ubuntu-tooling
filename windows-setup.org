# -*- ii: ii; -*-

#+TITLE: Windows 10 Setup
#+AUTHOR: James Blair
#+EMAIL: mail@jamesblair.net
#+DATE: <2020-09-26 Sat 06:45>


This org file will guide you through the process of setting a development environment in Windows 10 using Windows Subsystem for Linux.

The Windows Subsystem for Linux lets developers run a GNU/Linux environment -- including most command-line tools, utilities, and applications -- directly on Windows, unmodified, without the overhead of a traditional virtual machine or dualboot setup.


* Install windows subsystem for linux

To get underway we need to enable [[https://docs.microsoft.com/en-us/windows/wsl/install-win10][WSL2]].  This requires a 64bit installation of Windows 10 professional, build 18362 or higher.

#+NAME: Enable the wsl features
#+BEGIN_SRC shell
# Enable the WSL2 without reboot
dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart

# Enable the Virtual Machine Platform
dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
#+END_SRC

#+begin_quote
*Note*: You may need to set this manually in the *Turn windows features on/off* Windows 10 settings.
#+end_quote

Once the wsl feature is enabled it is recommended to update the linux kernel package for wsl2.

#+begin_quote
*Note:* Before proceeding with the installation of WSL 2, you will need to have CPU virtualisation enabled on your machine. Depending on your CPU architecture this may involve updating your bios settings:

 - For AMD CPUs, you will look for a feature called: "AMD (AMD Secure Virtual Machine, AMD SVM)"

 - For Intel CPUs, you will look for a feature called: "Intel (Intel Virtualization Technology, Intel VT-x)"

Finally, for AMD CPUs you may need to update [[https://www.reddit.com/r/AMDHelp/comments/d4l462/enabling_svm_on_laptop_leads_to_black_boot_screen/][UMA Framebuffer size]] to auto.
#+end_quote

Before we install a specific distribution of wsl we need to set the default version of wsl to version 2.

#+NAME: Set default wsl version
#+BEGIN_SRC shell
powershell.exe wsl --set-default-version 2
#+END_SRC

#+begin_quote
*Note*: It's important to complete this step! This enables us to use ~wslg~ and EMACS gui version.
#+end_quote

You can use the following command to verify the distribution and version you now have installed ~powershell.exe wsl --list -v~.

The best method to install ~wsl~ is to use the [[https://apps.microsoft.com/detail/9P9TQF7MRM4R][official version available from the Microsoft Store]] in order to receive WSL updates as soon as they're available.

Alternatively - we can use Powershell to install ~wsl~.

#+NAME: Install wsl
#+begin_src  shell
wsl --install
#+end_src

#+begin_quote
*Note*: We can run the ~wsl --install <distribution name>~ to install a specific distro (such as Ubuntu). For a valid list of distros, we can run ~wsl --list --online~.
#+end_quote

* Install an x server for wsl (deprecated)

#+begin_quote
*Note*: This is for legacy systems - this feature is native to ~wsl~ versions available for Windows 10/11.
#+end_quote

One of the ways we extend standard wsl functionality is installing an x server on windows to allow graphical applications to be run.

This has the added benefit of allowing command line clipboard tools like [[https://github.com/astrand/xclip][xclip]] to be used within wsl.

The x server I've found to be rock solid for this purpose is [[https://sourceforge.net/projects/vcxsrv/][VcXsrv]].  Which is also open source.

#+NAME: Download and install VcXsrv
#+BEGIN_SRC shell
# Download the vcxsrv installer
powershell.exe curl.exe -L -o $env:TEMP\installer.exe  https://sourceforge.net/projects/vcxsrv/files/latest/download

# Install vcxsrv
powershell.exe $env:TEMP\installer.exe
#+END_SRC

  
After following through the installer we want to ensure VcXsrv launches at startup with our desired configuration.

To achieve this we can add an xlaunch configuration which is just xml with a fancy extension to our machines startup folder.

#+NAME: Apply our VcXsrv configuration
#+BEGIN_SRC shell
cd /mnt/c/ProgramData/Microsoft/Windows/Start\ Menu/Programs/Startup
cat > VcXsrv.xlaunch << EOF
<?xml version="1.0" encoding="UTF-8"?>
<XLaunch WindowMode="MultiWindow" ClientMode="NoClient" LocalClient="False" Display="-1" LocalProgram="xcalc" RemoteProgram="xterm" RemotePassword="" PrivateKey="" RemoteHost="" RemoteUser="" XDMCPHost="" XDMCPBroadcast="False" XDMCPIndirect="False" Clipboard="True" ClipboardPrimary="True" ExtraParams="" Wgl="True" DisableAC="True" XDMCPTerminate="False"/>
EOF
cmd.exe /c VcXsrv.xlaunch
#+END_SRC

  
* Configure windows ten

Enable all tray icons to be visible and restart explorer

#+NAME: Configure tray icons
#+BEGIN_SRC shell
# Ensure all tray icons are visible
powershell.exe Set-ItemProperty HKLM:\SOFTWARE\Micorosoft\Windows\CurrentVersion\Explorer EnableAutoTray 0

# Restart explorer
powershell.exe ps explorer | kill
#+END_SRC

Additionally I normally take the following actions:

** Update taskbar layout

I normally take the following steps immediately for a new installtion, I have not found an easy way of automating this as yet:

 - Hide the search box.
 - Hide the task view button.
 - Unpin all but explorer.


** Update start menu layout

I prefer to have no pinned "tiles" in my start menu. The script below will unpin all applications from start.

*Note:* In subsequent versions of Windows 10 this script seems to fail so I am back to doing this manually for now...

#+begin_src shell
 powershell.exe -NoLogo 
    (New-Object -Com Shell.Application). 
NameSpace('shell:::{4234d49b-0245-4df3-b780-3893943456e1}'). 
Items() | 
%{ $_.Verbs() } | 
?{$_.Name -match 'Un.*pin from Start'} | 
%{$_.DoIt()} 
#+end_src


** Lock screen configuration

I prefer a simple lock screen with no clutter so normally take the following steps:

 - Untick show tips
 - Set background to be picture and use in folder
 - Remove status detailed or otherwise for apps on lock screen


** Fix inactive window title colors

One of the annoyances I have in windows ten is after setting a title bar color for windows as part of standard theming any inactive windows have an awful white glare instead of retaining that color. Thankfully there is a [[ https://winaero.com/blog/change-color-of-inactive-title-bars-in-windows-10][registry tweak]] we can do to fix this.

#+NAME: Configure inactive window title color
#+BEGIN_SRC shell
powershell.exe Set-ItemProperty HKCU:\SOFTWARE\Micorosoft\Windows\DWM AccentColorInactive ff484a4c
#+END_SRC


* Configure a web browser

My current browser of choice is [[https://www.mozilla.org/en-US/firefox/new/][Firefox]].  This is primarily due to their respect for open source, user privacy and security and customisation.

#+NAME: Download and run firefox installer
#+begin_src shell
# Download the firefox installer
powershell.exe curl.exe -L -o $env:TEMP\firefox.exe https://download.mozilla.org/?product=firefox

# Launch the installer
#env:TEMP\firefox.exe
#+end_src


One of the customisations we apply is to update the color of the newtab page in firefox to match the rest of the theme we use and prevent white glare. To achieve this we use [[https://superuser.com/questions/1235975/change-firefox-new-tab-background#][usercss]].

Note there is an about:config setting that needs to be set to enable these stylesheets to be used ~toolkit.legacyUserProfileCustomizations.stylesheets~

#+NAME: Configure usercss
#+begin_src shell
cd /c/Users/$USER/AppData/Roaming/Mozilla/Firefox/Profiles/[Default Profile]/chrome/
cat > userContent.css << EOF 
/* https://userstyles.org/styles/90565/firefox-adjust-white-flash-when-opening-new-tab */
/* https://userstyles.org/styles/142191/remove-new-tab-flash */
@-moz-document url-prefix(about:preferences), url-prefix(about:blank), url-prefix(about:newtab) {
  html, body, #newtab-customize-overlay {
    background: #323232 !important;
    color: #b2b2b2 !important;
  } 
}

@-moz-document url(chrome://browser/content/browser.xul)
{

  browser[type="content-primary"]
  {
    background: #323232 !important;
    color: #b2b2b2 !important;
  }
}

@-moz-document url(chrome://browser/content/browser.xul)
{

  browser[type="content-primary"], tabbrowser tabpanels, #appcontent > #content
  {
    background: #1B1B1B url("chrome://global/skin/media/imagedoc-darknoise.png") repeat fixed !important;
    color: #b2b2b2 !important;
  }
}

@-moz-document url(about:blank),
               url(about:preferences),
               url(about:config),
               url(about:newtab)
{
  #newtab-window,
  html,
  body, 
  #newtab-customize-overlay 
  {
    background: #1B1B1B url("chrome://global/skin/media/imagedoc-darknoise.png") repeat fixed;
    color: #b2b2b2 !important;
  }
}

EOF
#+end_src
